#include <iostream>
#include <stdlib.h>

int GCD(int a, int b) // функция поиска НОД. На вход подаются 2 числа
{
	if (a != b) // если числа не равны друг другу, то применяем алгоритм Евклида
	{
		if (a == 0) // если a=0, то возвращаем число b, т.к. 0 делится на все, значит НОД равен b
		{
			return b;
		}
		else if (b == 0) // если b=0, то возвращаем число a, т.к. 0 делится на все, значит НОД равен a
		{
			return a;
		}
		else // в остальных случаях вычитаем из большего числа меньшее и вызываем рекурсивно функцию, пока не найдется НОД
		{
			if (a > b)
			{
				a -= b;
			}
			else
			{
				b -= a;
			}
			return GCD(a, b);
		}
	}
	return a; //если числа равны друг другу, то их НОД - это одно из чисел. Возвращаем его
}

void ShakerSort(int* mass, int n) // функция сортировки массива методом "шейкера". На вход подается массив и количество элементов в нем
{
	int left = 0, right = n - 1, flag = 1; // вводим переменные границ (левая и правая), а также флага для анализа перемещений в итерации
	while (left < right and flag != 0) // цикл работает, пока границы не сравнялись (то есть весь массив прошел сортировку) и пока в цикле есть перестановки
	{
		flag = 0;
		for (int i = left; i < right; i++) //пробегаемся по неотсортированному массиву, если есть соседние элементы, стоящие не "по порядку", то меняем их местами и ставим флаг на 1, то есть перестановка есть
		{
			if (mass[i] < mass[i + 1])
			{
				int temp = mass[i];
				mass[i] = mass[i + 1];
				mass[i + 1] = temp;
				flag = 1;
			}
		}
		right--; //уменьшаем правую границу неотсортированного массива на 1 (т.к. крайний правый элемент уже на своем месте)
		for (int i = right; i > left; i--) //пробегаемся по неотсортированному массиву с новыми границами уже справа налево
		{
			if (mass[i - 1] < mass[i])
			{
				int temp = mass[i];
				mass[i] = mass[i - 1];
				mass[i - 1] = temp;
				flag = 1;
			}
		}
		left++; //увеличиваем левую границу неотсортированного массива на 1 (т.к. крайний левый элемент уже на своем месте)
	}
}

int main()
{
	setlocale(LC_ALL, "rus"); //объявление русской библиотеки для ввода текста
	int i, n; //вводим переменные для счетчика, количества элементов в массиве
	printf("Введите количество элементов массива: "); //указание, что вводить
	scanf_s("%d", &n); // вводим размер массива
	int* s = (int*)malloc(n * sizeof(int)); //создаем динамический массив (выделяем память под массив размером количество элементов*размер одного элемента в байтах
	int* new_s = (int*)malloc((n - 1) * sizeof(int)); //создаем динамический массив для НОД элементов первого массива (выделяем память под массив размером количество элементов*размер одного элемента в байтах
	for (i = 0; i < n; i++) //считываем в цикле каждый элемент массива с клавиатуры
	{
		scanf_s("%d", &s[i]);
	}
	for (i = 0; i < n - 1; i++) //пробегаемся по массиву s, считаем НОД соседних элементов и добавляем в новый массив
	{
		new_s[i] = GCD(s[i], s[i + 1]);
	}
	printf("Новый массив: ");
	for (i = 0; i < n - 1; i++) // выводим неотсортированный массив
	{
		printf("%d ", new_s[i]);
	}
	ShakerSort(new_s, n - 1); // производим сортировку методом шейкера
	printf("\nОтсортированный массив методом шейкера по убыванию: ");
	for (i = 0; i < n - 1; i++) // выводим отсортированный массив
	{
		printf("%d ", new_s[i]);
	}
	return 0;
}
